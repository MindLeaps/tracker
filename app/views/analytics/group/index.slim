- content_for :title, t(:group_analytics)

= content_for :head_content
  meta name="turbolinks-cache-control" content="no-cache"
  = javascript_include_tag 'analytics'

= content_for :header_content do
  = render partial: '/shared/header_content', locals: { title: 'Group Analytics' }

= render '/shared/analytics_tabs'

= form_tag do
  table
    tr
      td style="padding-right: 20px;"
        = label_tag :organization_label, "Organization"
        = select_tag :organization_select, options_from_collection_for_select(@available_organizations, :id, :organization_name, @selected_organization_id), :prompt => 'All'
      td style="padding-right: 20px;"
        = label_tag :chapter_label, "Chapter"
        = select_tag :chapter_select, options_from_collection_for_select(@available_chapters, :id, :chapter_name, @selected_chapter_id), :prompt => 'All'
      td style="padding-right: 20px;"
        = submit_tag "Submit"

table id="trellis" style="width: 100%; table-layout: fixed;"
  - rows = (@count + 1)/2
  - rows.times do
    tr
      td
      td

= render '/shared/analytics_common'

javascript:
  updateDropdown($('#chapter_select'), filteredChapters().map(function(c) {return {label: c.chapter_name, value: c.id}; }));

  $('#organization_select').change(function () {
    updateDropdown($('#chapter_select'), filteredChapters().map(function (c) {
      return {label: c.chapter_name, value: c.id};
    }));
  });

  function startAnalytics() {
      var charts = [],
          $containers = $('#trellis td'),
          datasets = #{{ @series8.html_safe }};

      $.each(datasets, function (i, dataset) {
          charts.push(new Highcharts.Chart({

              chart: {
                  renderTo: $containers[i],
                  zoomType: 'x',
                  type: 'scatter'
              },
              exporting: {
                filename: dataset.group + '-chart',
                buttons: {
                  contextButton: {
                    menuItems: [
                      'downloadPNG',
                      'downloadJPEG',
                      'downloadPDF',
                      'downloadSVG'
                    ]
                  }
                },
                fallbackToExportServer: false
              },
              title: {
                  text: dataset.group
              },
              credits: {
                  enabled: false
              },
              tooltip: {
                formatter: function () {
                  return '<span style="color:' + this.point.color + '">\u25CF</span> ' + this.series.name +
                    '<br/><span>x: <span style="font-weight: bold">' + this.point.x + '</span></span>' +
                    '<br/><span>y: <span style="font-weight: bold">' + this.point.y + '</span></span>' +
                    (this.point.grade_count ? '<br/><span>#{t(:grades)}: ' + this.point.grade_count + '</span>' : '') +
                    (this.point.date ? '<br/><span>#{t(:lesson_date)}: ' + this.point.date + '</span>' : '');
                }
              },
              xAxis: {
                  allowDecimals: false,
                  title: {
                      text: '#{{ t(:nr_of_lessons) }}'
                  }
              },
              yAxis: {
                  allowDecimals: false,
                  title: {
                      text: '#{{ t(:performance)}}'
                  }
              },
              legend: {
                  enabled: false
              },
              plotOptions: {
                  series: {
                      events: {
                        click: function (e, a1, a2) {
                          if (e.point.lesson_url) {
                            window.open(e.point.lesson_url, '_blank');
                          }
                        }
                      },
                      marker: {
                          radius: 2
                      }
                  }
              },
              series: dataset.series

          }));
      });
  }

  function pollForHighcharts(cb) {
    if (window.Highcharts) {
      cb()
    } else {
      setTimeout(pollForHighcharts.bind(this, cb), 100);
    }
  }

  pollForHighcharts(startAnalytics);