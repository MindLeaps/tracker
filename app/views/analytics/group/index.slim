- content_for :title, t(:group_analytics)

= content_for :head_content
  = javascript_include_tag 'analytics'

= content_for :header_content do
  = render partial: '/shared/header_content', locals: { title: 'Group Analytics' }

= render '/shared/analytics_tabs'

.filter-wrap data-controller="analytics-filter"
  table
    tr
      td style="padding-right: 20px;"
        = label_tag :organization_label, "Organization"
        = select_tag :organization_select, options_from_collection_for_select(@available_organizations, :id, :organization_name, @selected_organization_id), :prompt => 'All', 'data-analytics-filter-target' => 'select', 'data-action' => 'analytics-filter#updateFilter', 'data-name' => 'organization_id', 'data-dependents' => ['chapter_id'].to_json, 'data-resources' => @available_organizations.map { |o| { id: o.id, label: o.organization_name } }.to_json
      td style="padding-right: 20px;"
        = label_tag :chapter_label, "Chapter"
        = select_tag :chapter_select, options_from_collection_for_select(@available_chapters, :id, :chapter_name, @selected_chapter_id), :prompt => 'All', 'data-analytics-filter-target' => 'select', 'data-action' => 'analytics-filter#updateFilter', 'data-name' => 'chapter_id', 'data-resources' => @available_chapters.map { |c| { id: c.id, label: c.chapter_name, depend_id: c.organization_id } }.to_json
      td style="padding-right: 20px;"
        a.mdl-button.mdl-js-button.mdl-button--raised.mdl-button--accent.mdl-js-ripple-effect data-analytics-filter-target="anchor"
          = t(:filter)

table id="trellis" style="width: 100%; table-layout: fixed;"
  - rows = (@group_series.count + 1)/2
  - @group_series.each_slice(2) do |d1, d2|
    tr
      td id=("group-#{d1[:group]}")
      - if d2
        td id=("group-#{d2[:group]}")

= render '/shared/analytics_common'

javascript:
  function startAnalytics() {
    var datasets = #{{ @group_series.to_json.html_safe }};

    datasets.forEach(function(dataset) {
      new Highcharts.Chart({
        chart: {
            renderTo: 'group-' + dataset.group,
            zoomType: 'x',
            type: 'scatter'
        },
        exporting: {
          filename: dataset.group + '-chart',
          buttons: {
            contextButton: {
              menuItems: [
                'downloadPNG',
                'downloadJPEG',
                'downloadPDF',
                'downloadSVG'
              ]
            }
          },
          fallbackToExportServer: false
        },
        title: {
            text: dataset.group
        },
        credits: {
            enabled: false
        },
        tooltip: {
          formatter: function () {
            return '<span style="color:' + this.point.color + '">\u25CF</span> ' + this.series.name +
              '<br/><span>x: <span style="font-weight: bold">' + this.point.x + '</span></span>' +
              '<br/><span>y: <span style="font-weight: bold">' + this.point.y + '</span></span>' +
              (this.point.grade_count ? '<br/><span>#{t(:grades)}: ' + this.point.grade_count + '</span>' : '') +
              (this.point.date ? '<br/><span>#{t(:lesson_date)}: ' + this.point.date + '</span>' : '');
          }
        },
        xAxis: {
            allowDecimals: false,
            title: {
                text: '#{{ t(:nr_of_lessons) }}'
            }
        },
        yAxis: {
            allowDecimals: false,
            title: {
                text: '#{{ t(:performance)}}'
            }
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            series: {
                events: {
                  click: function (e, a1, a2) {
                    if (e.point.lesson_url) {
                      window.open(e.point.lesson_url, '_blank');
                    }
                  }
                },
                marker: {
                    radius: 2
                }
            }
        },
        series: dataset.series
    });
  });
  }

  function pollForHighcharts(cb) {
    if (window.Highcharts) {
      cb()
    } else {
      setTimeout(pollForHighcharts.bind(this, cb), 100);
    }
  }

  pollForHighcharts(startAnalytics);