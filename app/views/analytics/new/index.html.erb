<% content_for :title, t(:general_analytics).capitalize %>

<div class="w-full h-full bg-white p-6">
  <h1 class="text-center text-6xl font-bold mb-6">Analytics</h1>

  <div class="w-full flex justify-between gap-24">
    <div class="w-full max-w-10xl border border-2 border-gray-400 rounded-md p-2 shadow">
      <canvas id="myChart"></canvas>
    </div>

    <div class="w-1/2 flex-col" data-controller="analytics-filter">
      <div class="mb-2">
        <%= label_tag :organization_label, "Organization", class: 'block text-2xl text-right font-medium text-gray-700' %>
        <%= select_tag :organization_select, options_from_collection_for_select(@available_organizations, :id, :organization_name, @selected_organization_id), :class => 'mt-4 block w-full text-xl shadow border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md', :prompt => 'All', 'data-analytics-filter-target' => 'select', 'data-action' => 'analytics-filter#updateFilter', 'data-name' => 'organization_id', 'data-dependents' => ['chapter_id'].to_json, 'data-resources' => @available_organizations.map { |o| { id: o.id, label: o.organization_name} }.to_json %>
      </div>
      <div class="my-2">
        <%= label_tag :chapter_label, "Chapter", class: 'block text-2xl text-right font-medium text-gray-700' %>
        <%= select_tag :chapter_select, options_from_collection_for_select(@available_chapters, :id, :chapter_name, @selected_chapter_id), :class => 'mt-4 block w-full text-xl shadow border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500rounded-md', :prompt => 'All', 'data-analytics-filter-target' => 'select', 'data-action' => 'analytics-filter#updateFilter', 'data-name' => 'chapter_id', 'data-dependents' => ['group_id'].to_json, 'data-resources' => @available_chapters.map { |c| { id: c.id, label: c.chapter_name, depend_id: c.organization_id } }.to_json %>
      </div>
      <div class="my-2">
        <%= label_tag :group_label, "Group", class: 'block text-2xl text-right font-medium text-gray-700' %>
        <%= select_tag :group_select, options_from_collection_for_select(@available_groups, :id, :group_name, @selected_group_id), :class => 'mt-4 block w-full text-xl shadow border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md', :prompt => 'All', 'data-analytics-filter-target' => 'select', 'data-action' => 'analytics-filter#updateFilter', 'data-name' => 'group_id', 'data-dependents' => ['student_id'].to_json, 'data-resources' => @available_groups.map { |g| { id: g.id, label: g.group_name, depend_id: g.chapter_id } }.to_json %>
      </div>
      <div class="my-2">
        <%= label_tag :student_label, "Student", class: 'block text-2xl text-right font-medium text-gray-700' %>
        <%= select_tag :student_select, options_from_collection_for_select(@available_students, :id, :proper_name, @selected_student_id), :class => 'mt-4 block w-full text-xl shadow border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md', :prompt => 'All', 'data-analytics-filter-target' => 'select', 'data-action' => 'analytics-filter#updateFilter', 'data-name' => 'student_id', 'data-resources' => @available_students.map { |s| { id: s.id, label: s.proper_name, depend_id: s.group_id } }.to_json %>
      </div>
      <div class="flex justify-between gap-4 mt-6">
        <%= render CommonComponents::ButtonComponent.new(label: t(:filter), options: { 'data-analytics-filter-target' => 'anchor', 'data' => { turbo: false }, class: '!text-xl normal-button w-full justify-center !m-0' })%>
        <%= render CommonComponents::ButtonComponent.new(label: 'Download Chart', options: { 'id' => 'myChartLink', class: '!text-xl normal-button w-full justify-center !m-0' })%>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let allSummaries = <%= @selected_summaries.to_json.html_safe %>;
    let dataSets = []
    let maxIndex = 0

    allSummaries.forEach((s, index) => {
        let numberOfPoints = s.series[0].data.length
        dataSets.push({
            label: s.series[0].name,
            data: s.series[0].data.map(dataPoint => ({ x: dataPoint.x, y: dataPoint.y, date: dataPoint.date, url: dataPoint.lesson_url })),
            fill: false,
            borderColor:  "#" + ((1 << 24) * Math.random() | 0).toString(16).padStart(6, "0"),
            borderWidth: 4,
            tension: 0.2
        })

        if(numberOfPoints > maxIndex) maxIndex = numberOfPoints
    })

    const plugin = {
        id: 'customCanvasBackgroundColor',
        beforeDraw: (chart, args, options) => {
            const {ctx} = chart;
            ctx.save();
            ctx.globalCompositeOperation = 'destination-over';
            ctx.fillStyle = options.color || '#99ffff';
            ctx.fillRect(0, 0, chart.width, chart.height);
            ctx.restore();
        }
    };

    let myChart = new Chart(document.getElementById('myChart'), {
        type: 'line',
        data: {
            labels: Array.from({ length: maxIndex }, (x, i) => i + 1),
            datasets: dataSets
        },
        options: {
           clip: false,
           plugins: {
                title: {
                    display: true,
                    text: 'Average Performance versus number of Lessons',
                    fullSize: true,
                    padding: 20,
                    font: {
                        size: 20
                    }
                },
                legend: {
                    display: true,
                    position: 'bottom',
                },
                customCanvasBackgroundColor: {
                    color: 'white',
                },
                tooltip: {
                    enabled: true,
                    callbacks: {
                        title: () => '',
                        label: (item) => {
                            return item.dataset.label
                        },
                        beforeFooter: (item) => {
                            return 'Lesson Date: ' + item[0].raw.date
                        },
                        footer: (item) => {
                            return 'Average Mark: ' + item[0].formattedValue
                        }
                    }
                }
            },
            scales: {
                x: {
                    title:{
                        display: true,
                        text: 'Number of Lessons',
                        font: {
                            size: 20
                        }
                    },
                    ticks: {
                        padding: 8,
                        font: {
                            size: 14
                        },
                    }
                },
                y: {
                    title:{
                        display: true,
                        text: 'Score',
                        font: {
                            size: 20
                        }
                    },
                    beginAtZero: true,
                    min: 1,
                    max: 7,
                    ticks: {
                        padding: 5,
                    }
                }
            },
            animation: {
                onComplete: function () {
                    const downloadAnchor = document.getElementById('myChartLink')
                    downloadAnchor.href = myChart.toBase64Image();
                    downloadAnchor.download = 'Performance_Chart.png';
                }
            },
        },
        plugins: [plugin]
    });
</script>