- content_for :title, t(:subject_analytics)

= content_for :head_content
  meta name="turbolinks-cache-control" content="no-cache"
  = javascript_include_tag 'analytics'

= content_for :header_content do
  = render partial: '/shared/header_content', locals: { title: 'Subject Analytics' }

= render '/shared/analytics_tabs'

= form_tag do
  table
    tr
      td style="padding-right: 20px;"
        = label_tag :organization_label, "Organization"
        = select_tag :organization_select, options_from_collection_for_select(@organizations, :id, :organization_name, @selected_organization_id), :prompt => 'All'
      td style="padding-right: 20px;"
        = label_tag :chapter_label, "Chapter"
        = select_tag :chapter_select, options_from_collection_for_select(@chapters, :id, :chapter_name, @selected_chapter_id), :prompt => 'All'
      td style="padding-right: 20px;"
        = label_tag :group_label, "Group"
        = select_tag :group_select, options_from_collection_for_select(@groups, :id, :group_name, @selected_group_id), :prompt => 'All'
      td style="padding-right: 20px;"
        = label_tag :subject_label, "Subject"
        = select_tag :subject_select, options_from_collection_for_select(@subjects, :id, :subject_name, @subject)
      td style="padding-right: 20px;"
        = label_tag :student_label, "Student"
        = select_tag :student_select, options_from_collection_for_select(@students, :id, :proper_name, @selected_student_id), :prompt => 'All'
      td style="padding-right: 20px;"
        = submit_tag "Submit"

table id="trellis" style="width: 100%; table-layout: fixed;"
  - rows = (@count + 1)/2
  - rows.times do
    tr
      td
      td

javascript:
  $('#organization_select').change(function () {
    var selectedOrganization = $('#organization_select :selected').val();
    pegasus('#{{find_update_chapters_path}}?organization_id=' + selectedOrganization)
        .then(function (data) {
          var chapters = data.chapters;

          $('#chapter_select').empty();
          var opt = document.createElement('option');
          opt.text = 'All';
          $('#chapter_select').append(opt, null);

          for (i = 0; i < chapters.length; i++) {
            var chapter = chapters[i];

            var opt = document.createElement('option');
            opt.text = chapter.chapter_name;
            opt.value = chapter.id;

            $('#chapter_select').append(opt, null);
          }
          $('#chapter_select').select(0);
          $('#chapter_select').change();
        },function (data) {
        }
    );

    pegasus('#{{find_update_subjects_path}}?organization_id=' + selectedOrganization)
        .then(function (data) {
          var subjects = data.subjects;

          $('#subject_select').empty();

          for (i = 0; i < subjects.length; i++) {
            var subject = subjects[i];

            var opt = document.createElement('option');
            opt.text = subject.subject_name;
            opt.value = subject.id;

            $('#subject_select').append(opt, null);
          }
          $('#subject_select').select(0);
        }, function() {
        }
    );
  });
  $('#chapter_select').change(function () {
    var selectedOrganization = $('#organization_select :selected').val();
    var selectedChapter = $('#chapter_select :selected').val();

    pegasus('#{{find_update_groups_path}}?organization_id=' + selectedOrganization + '&chapter_id=' + selectedChapter)
        .then(function (data) {
            var groups = data.groups;

            $('#group_select').empty();
            var opt = document.createElement('option');
            opt.text = 'All';

            $('#group_select').append(opt, null);
            for (i = 0; i < groups.length; i++) {
              var group = groups[i];

              var opt = document.createElement('option');
              opt.text = group.group_name;
              opt.value = group.id;

              $('#group_select').append(opt, null);
            }
            $('#group_select').select(0);
            $('#group_select').change();
          }, function (data) {
          }
        );
  });

  $('#group_select').change(function () {
    var selectedOrganization = $('#organization_select :selected').val();
    var selectedChapter = $('#chapter_select :selected').val();
    var selectedGroup = $('#group_select :selected').val();

    pegasus('#{{find_update_students_path}}?organization_id=' + selectedOrganization + '&chapter_id=' + selectedChapter + '&group_id=' + selectedGroup)
        .then(function (data) {
            var students = data.students;

            $('#student_select').empty();
            var opt = document.createElement('option');
            opt.text = 'All';

            $('#student_select').append(opt, null);
            for (i = 0; i < students.length; i++) {
              var student = students[i];

              var opt = document.createElement('option');
              opt.text = student.last_name + ', ' + student.first_name;
              opt.value = student.id;

              $('#student_select').append(opt, null);
            }
          }, function (data) {
          }
        );
  });

  function startAnalytics() {
    var charts = [],
      $containers = $('#trellis td'),
      datasets = #{{ @series3.html_safe }};

    $.each(datasets, function (i, dataset) {
      charts.push(new Highcharts.Chart({

                chart: {
                    renderTo: $containers[i],
                    zoomType: 'x',
                    type: 'scatter'
                },
                legend: {
                    enabled: true,
                    maxHeight: 120
                },
                credits: {
                    enabled: false
                },
                tooltip: {
                    formatter: function() {
                      return '<span style="color:' + this.point.color + '">\u25CF</span> ' + this.series.name +
                             '<br/><span>x: <span style="font-weight: bold">' + this.point.x + '</span></span>' +
                             '<br/><span>y: <span style="font-weight: bold">' + this.point.y + '</span></span>' +
                             (this.point.date ? '<br/><span>#{t(:lesson_date)}: ' + this.point.date + '</span>' : '');
                    }
                },
                exporting: {
                  filename: dataset.skill + '-chart',
                  buttons: {
                    contextButton: {
                      menuItems: [
                        'downloadPNG',
                        'downloadJPEG',
                        'downloadPDF',
                        'downloadSVG'
                      ]
                    }
                  },
                  fallbackToExportServer: false
                },
                title: {
                    text: dataset.skill
                },
                xAxis: {
                    title: {
                        text: '#{{ t(:nr_of_lessons) }}'
                    }
                },
                yAxis: {
                    allowDecimals: false,
                    title: {
                        text: '#{{ t(:performance)}}'
                    }
                },
                plotOptions: {
                    series: {
                        events: {
                            click: function(e, a1, a2) {
                              if (e.point.lesson_url) {
                                window.open(e.point.lesson_url, '_blank');
                              }
                            }
                        },
                        marker: {
                            radius: 2
                        }
                    }
                },
                series: dataset.series
      }));
    });
  }

  function pollForHighcharts(cb) {
    if (window.Highcharts) {
      cb()
    } else {
      setTimeout(pollForHighcharts.bind(this, cb), 100);
    }
  }

  pollForHighcharts(startAnalytics);