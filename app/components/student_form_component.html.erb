<%= simple_form_for @student, url: { action: @action }, html: { multipart: true } do |f| %>
<%= render partial: 'shared/errors', locals: {subject: @student} %>
<%= f.input :mlid, label: 'MLID', input_html: { autofocus: true } %>
<%= f.input :first_name %>
<%= f.input :last_name %>
<%= f.input :gender, as: :radio_buttons, item_wrapper_tag: 'label', item_wrapper_class: 'mdl-radio mdl-js-radio mdl-js-ripple-effect', checked: @student.gender || 'M' %>
<%= f.input :dob, label: t(:date_of_birth), start_year: 1990, end_year: Date.today.year, default: { day: 1, month: 1} %>
<%= f.input :estimated_dob, label: t(:dob_estimated) %><hr>
<%= f.association :group, collection: @permitted_groups, label_method: :group_chapter_name_with_mlids %>
<%= f.input :country_of_nationality, collection: I18nData.countries(locale.to_s).map { |k, v| [v, k] }.sort_alphabetical_by(&:first) %>
<%= f.input :quartier %><hr>
<%= f.input :guardian_name %>
<%= f.input :guardian_occupation %>
<%= f.input :guardian_contact %>
<%= f.input :family_members %><hr>
<%= f.input :name_of_school %>
<%= f.input :school_level_completed %>
<%= f.input :year_of_dropout, input_html: { min: 1980, max: 2030 } %>
<%= f.input :reason_for_leaving %><hr>
<%= f.input :health_insurance %>
<%= f.input :health_issues %>
<%= f.input :hiv_tested %><hr>
<div id="tag-container"></div>
<%= f.association :tags,
  collection: @permitted_tags,
  label_method: :tag_name,
  value_method: :id,
  include_hidden: false,
  wrapper_html: { class: 'hidden' }, input_html: { id: 'tags-field', multiple: true } %>
<%= f.input :tags_autocomplete, as: :fake, label: t(:student_tags), input_html: { id: 'tag-autocomplete' } %><hr>
<%= f.input :notes, input_html: {rows: 5} %><hr>
<%= f.button :submit, class: 'mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-js-ripple-effect' %>
<% end %>

<script>
  var input = document.getElementById('tag-autocomplete');
  var tagsField = document.getElementById('tags-field');

  var autocomplete = new Awesomplete(input, {
    list: formatOptions(getOptionsToDisplayInAutocomplete()),
    minChars: 0
  });

  var imageTag = '<%=image_tag "delete_forever.svg"  %>';

  input.addEventListener('focus', function(e) {
    autocomplete.evaluate();
  });

  input.addEventListener('keydown', function(e) {
    if (e.keyCode === 13) {
      e.preventDefault();
    }
  });

  var tagContainer = document.getElementById('tag-container');

  input.addEventListener('awesomplete-selectcomplete', function (e) {
    addTag(e.text);
    input.value = '';
    autocomplete.evaluate();
  });

  function renderTags() {
    tagContainer.innerHTML = '';
    var tags = formatOptions(getOptions().filter(function(option) {
      return option.selected === true;
    }));

    tags.forEach(function(tag) {
      var chipSpan = document.createElement('span');
      chipSpan.className = 'mdl-chip mdl-chip--deletable'

      var chipText = document.createElement('span');
      chipText.className = 'mdl-chip__text'
      var text = document.createTextNode(tag.label);
      chipText.appendChild(text);
      chipSpan.appendChild(chipText);

      var chipButton = document.createElement('button');
      chipButton.className = 'mdl-chip__action'
      chipButton.type = 'button'
      chipButton.innerHTML = imageTag;
      chipButton.addEventListener('click', function (e) {
        removeTagWithValue(tag.value);
      });
      chipSpan.appendChild(chipButton);

      tagContainer.appendChild(chipSpan);
    });

    updateAutocomplete();
  }

  function addTag(tag) {
    var tagToAdd = getOptions().find(function(option) {
      return option.value === tag.value;
    })
    tagToAdd.setAttribute('selected', 'selected');
    renderTags();
  }

  function removeTagWithValue(value) {
    var tagToRemove = getOptions().find(function(option) {
      return option.value === value;
    });
    tagToRemove.removeAttribute('selected');
    renderTags();
  }

  function getOptions() {
    return Array.prototype.slice.call(tagsField.getElementsByTagName('option'));
  }

  function getOptionsToDisplayInAutocomplete() {
    return getOptions().filter(function(option) {
      return !option.selected;
    });
  }

  function formatOptions(options) {
    return options.map(function (option) {
      return {value: option.value, label: option.innerText};
    });
  }

  function updateAutocomplete() {
    autocomplete.list = formatOptions(getOptionsToDisplayInAutocomplete());
  }

  renderTags();
</script>